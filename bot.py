import os
from telegram import Update
from telegram.ext import Application, MessageHandler, filters
import google.generativeai as genai
from pprint import pprint

print("=== –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===")
pprint({k: v for k, v in os.environ.items() if 'TOKEN' in k or 'API' in k or 'KEY' in k})

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not TELEGRAM_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Railway ‚Üí Variables")
    exit(1)

if not GEMINI_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

async def handle_message(update: Update, context):
    try:
        response = model.generate_content(update.message.text)
        await update.message.reply_text(response.text)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

app = Application.builder().token(TELEGRAM_TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
app.run_polling()