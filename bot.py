import os
import time
import google.generativeai as genai
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from collections import defaultdict

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π ---
TELEGRAM_TOKEN = os.getenv("7671191191:AAGy1Bja9D4DPPXdZjpJSB5AjEnptibkBqg")  # –ë–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
GEMINI_API_KEY = os.getenv("AIzaSyCPs9Wa7quNIYXgFknNT219AC5FWNDmFW4")

if not TELEGRAM_TOKEN or not GEMINI_API_KEY:
    raise ValueError("API keys not set in environment variables!")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini ---
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-pro-latest')

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram ---
app = Application.builder().token(TELEGRAM_TOKEN).build()

# --- –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ ---
user_last_request = defaultdict(float)  # {user_id: last_request_time}


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_time - user_last_request[user_id] < 2:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        return

    user_last_request[user_id] = current_time

    try:
        response = model.generate_content(update.message.text)
        await update.message.reply_text(response.text)

    except genai.types.StopCandidateException:
        await update.message.reply_text("üö´ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        print(f"Error: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Å–µ–±—è


app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

if __name__ == "__main__":
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏")
    app.run_polling()